/*ISC License. See https://github.com/richardstephens-dev/richardstephens-dev for full source and license text*/const WELCOME_PRE_EN = "Welcome! You'll find projects here about languages and retro games. Keep in mind that the code isn't perfect! I learn by experimenting, and experiments only work when you know you can improve. If you see a way to improve a project here or on my GitHub, please contact me below.", CONTACT_P_EN = "Richard Stephens\nrichard.stephens.15@ucl.ac.uk\n+44 0 7704 930 825\nLondon, UK", CONTACT_H1_EN = "Let's talk!", PROJECTS_TITLE_EN = "Projects:", PROJECTS_TITLE_RU = "Проекты:", WELCOME_PRE_RU = "Добро пожаловать! Здесь вы найдете проекты о языках и ретро-играх. Чтобы вы знали—код здесь не является идеальным! Я учусь на экспериментах, и это возможно только тогда, когда знаете, можете улучшить. Если увидите способ улучшить проект здесь или на моем GitHub, пожалуйста, свяжитесь со мной.", CONTACT_P_RU = "Ричард Стивенс\nrichard.stephens.15@ucl.ac.uk\n+44 0 7704 930 825\nЛондон, Великобритания", CONTACT_H1_RU = "Давайте поговорим!", texts = { en: { "welcome-pre": WELCOME_PRE_EN, "projects-header": "Projects:", "contact-h1": "Let's talk!", "contact-p": CONTACT_P_EN }, ru: { "welcome-pre": WELCOME_PRE_RU, "projects-header": "Проекты:", "contact-h1": CONTACT_H1_RU, "contact-p": CONTACT_P_RU } }; var localizedTexts = texts.en; function initPage() { initLang(); let e = texts[document.cookie.split("=")[1]]; writeBlinkerText(e["welcome-pre"], 0, 0, "welcome-pre"), document.getElementById("projects-header").innerHTML = e["projects-header"], writeProjectCards() } function initLang() { let e = document.cookie.split("=")[1]; null == e && (e = "en", document.cookie = "lang=en"), document.documentElement.setAttribute("lang", e), document.getElementById("lang-img").src = "en" == e ? "assets/images/ru.svg" : "assets/images/en.svg" } async function writeProjectCards() { const e = await fetch("https://api.github.com/users/richardstephens-dev/repos").then((e => e.json())).then((e => JSON.stringify(e, null, 2))); let t = JSON.parse(e).sort(((e, t) => new Date(e.updated_at) - new Date(t.updated_at))), n = []; for (let e = 0; e < t.length; e++)n.push(t[e].name); let i = {}; for (let e = 0; e < n.length; e++) { const t = await fetch(`https://api.github.com/repos/richardstephens-dev/${n[e]}/commits?per_page=3`).then((e => e.json())).then((e => JSON.stringify(e, null, 2))); let o = JSON.parse(t); i[n[e]] = o } let o = document.getElementById("project-cards"); o.innerHTML = ""; for (let e = 0; e < Math.min(5, t.length); e++) { let n = i[t[e].name][0], a = i[t[e].name][1], s = i[t[e].name][2]; if (null == n || null == a || null == s) continue; let r = t[e], c = document.createElement("div"); c.classList.add("card"), c.innerHTML = `\n            <a href="${r.html_url}">\n            <h1>${r.name}</h1></a>\n            <p>${r.description}\n            \n(${n.commit.author.date.split("T")[0]}): ${n.commit.message}\n            \n(${a.commit.author.date.split("T")[0]}): ${a.commit.message}\n            \n(${s.commit.author.date.split("T")[0]}): ${s.commit.message}\n            </p>\n        `, c.style.top = 10 * e + "px", c.style.transform = `rotate(${4 * (3 * Math.random() - 2)}deg)`, o.appendChild(c) } let a = document.createElement("div"); a.classList.add("card"), a.innerHTML = `\n        <h1>${localizedTexts["contact-h1"]}</h1>\n        <p>${localizedTexts["contact-p"]}</p>\n    `, o.appendChild(a) } function toggleLang() { if ("en" == document.documentElement.getAttribute("lang")) return localizedTexts = texts.ru, document.documentElement.setAttribute("lang", "ru"), document.getElementById("lang-img").src = "assets/images/en.svg", document.cookie = "lang=ru", clearTimeout(writeBlinkerTextTimeout), document.getElementById("welcome-pre").innerHTML = "", void initPage(); localizedTexts = texts.en, document.documentElement.setAttribute("lang", "en"), document.getElementById("lang-img").src = "assets/images/ru.svg", document.cookie = "lang=en", clearTimeout(writeBlinkerTextTimeout), document.getElementById("welcome-pre").innerHTML = "", initPage() } function toggleTheme() { if ("dark" == document.documentElement.getAttribute("theme")) return document.documentElement.setAttribute("theme", "light"), void (document.getElementById("theme-img").src = "assets/images/dark.svg"); document.documentElement.setAttribute("theme", "dark"), document.getElementById("theme-img").src = "assets/images/light.svg" } let writeBlinkerTextTimeout; function writeBlinkerText(e, t, n, i) { if (t < e.length) { if (n = e.substring(t, t + 1).match(/\s/) && e.substring(t - 1, t).match(/[.!?]$/) ? 750 : 25, document.getElementsByClassName("blinker").length > 0) { var o = document.getElementsByClassName("blinker")[0]; o.parentNode.removeChild(o) } var a = document.getElementById(i).innerHTML + e[t++]; document.getElementById(i).innerHTML = a + "<span class='blinker'></span>", writeBlinkerTextTimeout = setTimeout((function () { writeBlinkerText(e, t, n, i) }), n) } } window.addEventListener("load", (function () { initPage() }));